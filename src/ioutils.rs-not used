use std::io;
use std::io::prelude::*;
use std::fs::File;
use std::io::Read;
//use std::io::Write;
use std::io::SeekFrom;

use std::str;
use std::io::{Error, ErrorKind};
use header::Header;
use serde_json;

pub trait IOUTILS {
    fn read_u64(&mut self) -> io::Result<u64>;
    fn read_i64(&mut self) -> io::Result<i64>;
    fn read_header(&mut self, offset: u64, size: u64) -> io::Result<Header>;

    fn write_u64(&mut self, val: u64) -> io::Result<()>;
    fn write_i64(&mut self, val: i64) -> io::Result<()>;
    fn write_string(&mut self, buffer: String) -> io::Result<()>;
}

// Specific helper functions for handling raw IO with the DOVE storage
impl IOUTILS for File {
    fn read_u64(&mut self) -> io::Result<u64> {
        let mut buf: [u8; 8] = [0; 8];
        self.read_exact(&mut buf)?;
        Ok(bytes_to_u64(&buf))
    }

    fn read_i64(&mut self) -> io::Result<i64> {
        let mut buf: [u8; 8] = [0; 8];
        self.read_exact(&mut buf)?;
        Ok(bytes_to_i64(&buf))
    }

    fn read_header(&mut self, offset: u64, size: u64) -> io::Result<Header> {
        self.seek(SeekFrom::Start(offset))?;
        let mut buffer = Vec::new();
        {
            let f = self.by_ref();
            f.take(size).read_to_end(&mut buffer)?;
        }

        let s = match str::from_utf8(&buffer) {
            Ok(v) => v,
            Err(e) => {
                return Err(Error::new(
                    ErrorKind::Other,
                    "Failed to parse string as UTF8",
                ))
            }
        };
        let header: Header = serde_json::from_str(s)?;
        Ok(header)
    }

    fn write_u64(&mut self, val: u64) -> io::Result<()> {
        self.write_all(&u64_to_bytes(val))
    }

    fn write_i64(&mut self, val: i64) -> io::Result<()> {
        self.write_all(&i64_to_bytes(val))
    }

    fn write_string(&mut self, buffer: String) -> io::Result<()> {
        self.write_all(buffer.as_bytes())
    }
}

#[cfg(target_endian = "big")]
pub fn bytes_to_i64(x: &[u8; 8]) -> i64 {
    ((x[0] as i64) << 56) + ((x[1] as i64) << 48) + ((x[2] as i64) << 40) + ((x[3] as i64) << 32)
        + ((x[4] as i64) << 24) + ((x[5] as i64) << 16) + ((x[6] as i64) << 8)
        + ((x[7] as i64) << 0)
}

#[cfg(target_endian = "little")]
pub fn bytes_to_i64(x: &[u8; 8]) -> i64 {
    ((x[7] as i64) << 56) + ((x[6] as i64) << 48) + ((x[5] as i64) << 40) + ((x[4] as i64) << 32)
        + ((x[3] as i64) << 24) + ((x[2] as i64) << 16) + ((x[1] as i64) << 8)
        + ((x[0] as i64) << 0)
}

#[cfg(target_endian = "big")]
pub fn i64_to_bytes(x: i64) -> [u8; 8] {
    [
        ((x >> 56) & 0xff) as u8,
        ((x >> 48) & 0xff) as u8,
        ((x >> 40) & 0xff) as u8,
        ((x >> 32) & 0xff) as u8,
        ((x >> 24) & 0xff) as u8,
        ((x >> 16) & 0xff) as u8,
        ((x >> 8) & 0xff) as u8,
        ((x >> 0) & 0xff) as u8,
    ]
}

#[cfg(target_endian = "little")]
pub fn i64_to_bytes(x: i64) -> [u8; 8] {
    [
        ((x >> 0) & 0xff) as u8,
        ((x >> 8) & 0xff) as u8,
        ((x >> 16) & 0xff) as u8,
        ((x >> 24) & 0xff) as u8,
        ((x >> 32) & 0xff) as u8,
        ((x >> 40) & 0xff) as u8,
        ((x >> 48) & 0xff) as u8,
        ((x >> 56) & 0xff) as u8,
    ]
}

#[cfg(target_endian = "big")]
pub fn bytes_to_u64(x: &[u8; 8]) -> u64 {
    ((x[0] as u64) << 56) + ((x[1] as u64) << 48) + ((x[2] as u64) << 40) + ((x[3] as u64) << 32)
        + ((x[4] as u64) << 24) + ((x[5] as u64) << 16) + ((x[6] as u64) << 8)
        + ((x[7] as u64) << 0)
}

#[cfg(target_endian = "little")]
pub fn bytes_to_u64(x: &[u8; 8]) -> u64 {
    ((x[7] as u64) << 56) + ((x[6] as u64) << 48) + ((x[5] as u64) << 40) + ((x[4] as u64) << 32)
        + ((x[3] as u64) << 24) + ((x[2] as u64) << 16) + ((x[1] as u64) << 8)
        + ((x[0] as u64) << 0)
}

#[cfg(target_endian = "big")]
pub fn u64_to_bytes(x: u64) -> [u8; 8] {
    [
        ((x >> 56) & 0xff) as u8,
        ((x >> 48) & 0xff) as u8,
        ((x >> 40) & 0xff) as u8,
        ((x >> 32) & 0xff) as u8,
        ((x >> 24) & 0xff) as u8,
        ((x >> 16) & 0xff) as u8,
        ((x >> 8) & 0xff) as u8,
        ((x >> 0) & 0xff) as u8,
    ]
}

#[cfg(target_endian = "little")]
pub fn u64_to_bytes(x: u64) -> [u8; 8] {
    [
        ((x >> 0) & 0xff) as u8,
        ((x >> 8) & 0xff) as u8,
        ((x >> 16) & 0xff) as u8,
        ((x >> 24) & 0xff) as u8,
        ((x >> 32) & 0xff) as u8,
        ((x >> 40) & 0xff) as u8,
        ((x >> 48) & 0xff) as u8,
        ((x >> 56) & 0xff) as u8,
    ]
}
